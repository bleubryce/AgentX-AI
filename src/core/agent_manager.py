#!/usr/bin/env python3
"""
Agent Manager - Core controller for the Real Estate Lead Generation AI Agents
"""

import os
import time
import logging
import schedule
import threading
from datetime import datetime
from typing import Dict, List, Optional, Union

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/agent_manager.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("AgentManager")

# Import agent types
from src.agents.buyer_agent import BuyerLeadAgent
from src.agents.seller_agent import SellerLeadAgent
from src.agents.refinance_agent import RefinanceLeadAgent
from src.data.lead_repository import LeadRepository
from src.core.config import AgentConfig

class AgentManager:
    """
    Manages the creation, scheduling, and monitoring of all lead generation agents.
    """
    
    def __init__(self):
        """Initialize the Agent Manager"""
        self.agents = {
            'buyer': {},
            'seller': {},
            'refinance': {}
        }
        self.lead_repository = LeadRepository()
        self.running_jobs = {}
        self.ensure_directories()
        logger.info("Agent Manager initialized")
        
    def ensure_directories(self):
        """Ensure all required directories exist"""
        os.makedirs("logs", exist_ok=True)
        os.makedirs("data", exist_ok=True)
        
    def create_agent(self, agent_type: str, config: AgentConfig) -> str:
        """
        Create a new agent with the specified configuration
        
        Args:
            agent_type: Type of agent ('buyer', 'seller', or 'refinance')
            config: Configuration for the agent
            
        Returns:
            agent_id: Unique identifier for the created agent
        """
        agent_id = f"{agent_type}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        if agent_type == 'buyer':
            self.agents['buyer'][agent_id] = BuyerLeadAgent(agent_id, config)
        elif agent_type == 'seller':
            self.agents['seller'][agent_id] = SellerLeadAgent(agent_id, config)
        elif agent_type == 'refinance':
            self.agents['refinance'][agent_id] = RefinanceLeadAgent(agent_id, config)
        else:
            raise ValueError(f"Unknown agent type: {agent_type}")
        
        logger.info(f"Created {agent_type} agent with ID {agent_id}")
        return agent_id
    
    def run_agent(self, agent_type: str, agent_id: str) -> List[Dict]:
        """
        Run a specific agent to generate leads
        
        Args:
            agent_type: Type of agent ('buyer', 'seller', or 'refinance')
            agent_id: ID of the agent to run
            
        Returns:
            leads: List of leads generated by the agent
        """
        if agent_id not in self.agents[agent_type]:
            raise ValueError(f"Agent {agent_id} not found")
        
        agent = self.agents[agent_type][agent_id]
        logger.info(f"Running agent {agent_id}")
        
        try:
            leads = agent.generate_leads()
            self.lead_repository.save_leads(leads, agent_type, agent_id)
            logger.info(f"Agent {agent_id} generated {len(leads)} leads")
            return leads
        except Exception as e:
            logger.error(f"Error running agent {agent_id}: {str(e)}")
            raise
    
    def schedule_agent(self, agent_type: str, agent_id: str, 
                      frequency: str, time_str: Optional[str] = None) -> None:
        """
        Schedule an agent to run on a recurring basis
        
        Args:
            agent_type: Type of agent ('buyer', 'seller', or 'refinance')
            agent_id: ID of the agent to schedule
            frequency: How often to run ('hourly', 'daily', 'weekly')
            time_str: Time to run (for daily/weekly), format: "HH:MM"
        """
        if agent_id not in self.agents[agent_type]:
            raise ValueError(f"Agent {agent_id} not found")
        
        job_id = f"{agent_type}_{agent_id}_{frequency}"
        
        # Define the job function
        def job():
            logger.info(f"Running scheduled job for agent {agent_id}")
            self.run_agent(agent_type, agent_id)
        
        # Schedule based on frequency
        if frequency == 'hourly':
            schedule.every().hour.do(job)
        elif frequency == 'daily':
            if time_str:
                schedule.every().day.at(time_str).do(job)
            else:
                schedule.every().day.do(job)
        elif frequency == 'weekly':
            if time_str:
                schedule.every().week.at(time_str).do(job)
            else:
                schedule.every().week.do(job)
        else:
            raise ValueError(f"Unknown frequency: {frequency}")
        
        self.running_jobs[job_id] = job
        logger.info(f"Scheduled agent {agent_id} to run {frequency}")
        
        # Start the scheduler in a separate thread if not already running
        if not hasattr(self, 'scheduler_thread') or not self.scheduler_thread.is_alive():
            self.start_scheduler()
    
    def start_scheduler(self):
        """Start the scheduler in a background thread"""
        def run_scheduler():
            while True:
                schedule.run_pending()
                time.sleep(1)
        
        self.scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        self.scheduler_thread.start()
        logger.info("Scheduler started")
    
    def stop_agent(self, agent_type: str, agent_id: str) -> None:
        """
        Stop a scheduled agent
        
        Args:
            agent_type: Type of agent ('buyer', 'seller', or 'refinance')
            agent_id: ID of the agent to stop
        """
        for job_id in list(self.running_jobs.keys()):
            if job_id.startswith(f"{agent_type}_{agent_id}_"):
                job = self.running_jobs.pop(job_id)
                schedule.cancel_job(job)
                logger.info(f"Stopped scheduled job for agent {agent_id}")
    
    def get_agent_status(self, agent_type: Optional[str] = None, 
                        agent_id: Optional[str] = None) -> Dict:
        """
        Get status information about agents
        
        Args:
            agent_type: Optional filter by agent type
            agent_id: Optional filter by agent ID
            
        Returns:
            status: Dictionary with agent status information
        """
        status = {}
        
        if agent_type and agent_id:
            # Get specific agent
            if agent_id in self.agents.get(agent_type, {}):
                agent = self.agents[agent_type][agent_id]
                status = {
                    'id': agent_id,
                    'type': agent_type,
                    'config': agent.config.dict(),
                    'scheduled': any(k.startswith(f"{agent_type}_{agent_id}_") for k in self.running_jobs),
                    'lead_count': self.lead_repository.get_lead_count(agent_type, agent_id)
                }
        elif agent_type:
            # Get all agents of a type
            status = {
                agent_id: {
                    'id': agent_id,
                    'config': agent.config.dict(),
                    'scheduled': any(k.startswith(f"{agent_type}_{agent_id}_") for k in self.running_jobs),
                    'lead_count': self.lead_repository.get_lead_count(agent_type, agent_id)
                }
                for agent_id, agent in self.agents.get(agent_type, {}).items()
            }
        else:
            # Get all agents
            status = {
                agent_type: {
                    agent_id: {
                        'id': agent_id,
                        'config': agent.config.dict(),
                        'scheduled': any(k.startswith(f"{agent_type}_{agent_id}_") for k in self.running_jobs),
                        'lead_count': self.lead_repository.get_lead_count(agent_type, agent_id)
                    }
                    for agent_id, agent in agents.items()
                }
                for agent_type, agents in self.agents.items() if agents
            }
        
        return status

# Singleton instance
_instance = None

def get_agent_manager():
    """Get the singleton instance of the AgentManager"""
    global _instance
    if _instance is None:
        _instance = AgentManager()
    return _instance

if __name__ == "__main__":
    # If run directly, start the agent manager
    manager = get_agent_manager()
    logger.info("Agent Manager running. Press Ctrl+C to exit.")
    
    try:
        # Keep the main thread alive
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("Agent Manager shutting down") 